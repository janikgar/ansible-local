---
- name: Check K3s roles
  debug:
    msg: "{{ ansible_host }}: {{ k3s_role }}"

- name: Check for Arkade
  command: which arkade
  register: arkade_present
  ignore_errors: yes

- name: Install Arkade
  shell: curl -sLS https://dl.get-arkade.dev | sudo sh
  when: arkade_present.failed == true

# - name: Get Service facts
#   service_facts: {}

# - name: Check for K3s
#   set_fact:
#     k3s_running: "{{ ansible_facts['services']['k3s.service'] == 'running' | default(false) }}"
#   register: k3s_running
#   when: k3s_role != 'agent'

- name: Download K3s script
  uri:
    url: https://get.k3s.io/
    return_content: yes
  register: k3s_install
  delegate_to: localhost
  become: no
  run_once: yes

- name: Add script to nodes
  copy:
    content: "{{ k3s_install.content }}"
    dest: "/tmp/k3s_install"
    owner: root
    group: root
    mode: "0500"

- name: Tasks to initialize leader
  when: k3s_role == 'leader'
  block:
  - name: Add manifests to leader
    copy:
      src: "{{ item }}"
      dest: "/var/lib/rancher/k3s/server/manifests/"
      owner: root
      group: root
      mode: "0400"
    with_fileglob:
      - files/*.yaml

  - name: Create join token
    shell: openssl rand -base64 30
    register: node_token
    run_once: true
    delegate_to: localhost
    become: no
    when: new_k3s_install

  - name: Initialize leader
    command: /tmp/k3s_install --disable traefik --disable local-storage server
    environment:
      K3S_TOKEN: "{{ node_token.stdout if new_k3s_install }}"
      INSTALL_K3S_VERSION: "{{ k3s_version }}"
    delegate_to: "{{ item }}"
    loop: "{{ groups['picluster_leader'] }}"

  - name: Wait to stabilize
    command: sleep 10
    delegate_to: 127.0.0.1
    become: no
    when: new_k3s_install

- name: Install servers
  command: "/tmp/k3s_install server --tls-san 192.168.1.101 --tls-san picluster-01.home.lan --tls-san picluster-control.home.lan"
  environment:
    K3S_TOKEN: "{{ node_token.stdout if new_k3s_install }}"
    INSTALL_K3S_VERSION: "{{ k3s_version }}"
  when: k3s_role == 'server'

- name: Install agents
  command: /tmp/k3s_install agent
  environment:
    K3S_URL: "https://192.168.1.101:6443"
    K3S_TOKEN: "{{ node_token.stdout if new_k3s_install}}"
    INSTALL_K3S_VERSION: "{{ k3s_version }}"
  when: k3s_role == 'agent'
