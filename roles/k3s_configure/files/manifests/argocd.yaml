apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: argocd
  namespace: kube-system
spec:
  repo: https://argoproj.github.io/argo-helm
  chart: argo-cd
  targetNamespace: argocd
  version: "8.1.2"
  valuesContent: |-
    applicationSet:
      resources:
        requests:
          cpu: 8m
          memory: 48Mi
        limits:
          cpu: 120m
          memory: 128Mi
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
      readinessProbe:
        enabled: true
      livenessProbe:
        enabled: true
    configs:
      cm:
        create: true
        accounts.admin: apiKey
        admin.enabled: "true"
        application.instanceLabelKey: argocd.argoproj.io/instance
        dex.config: |
          connectors:
          - config:
              issuer: https://vault.home.lan/v1/identity/oidc/provider/default
              clientID: NomDBxj3AiMhgE6zFDeUfxnpbR6U3W4S
              clientSecret: $dex.vault.clientSecret
              insecureEnableGroups: true
              insecureSkipEmailVerified: true 
              scopes:
              - profile
              - email
            name: vault
            type: oidc
            id: vault
        exec.enabled: "false"
        resource.compareoptions: |
          ignoreDifferencesOnResourceUpdates: true
        resource.customizations.ignoreResourceUpdates.Job: |
          jsonPointers:
            - /
        resource.customizations.ignoreResourceUpdates.all: |
          jsonPointers:
            - /status
            - /spec/preserveUnknownFields
        resource.customizations.ignoreResourceUpdates.argoproj.io_Application: |
          jsonPointers:
            - /metadata/generation
            - /metadata/resourceVersion
        resource.exclusions: |
          - apiGroups:
            - k3s.cattle.io
            - helm.cattle.io
            - upgrade.cattle.io
            kinds:
            - '*'
          - apiGroups:
            - '*'
            kinds:
              - Job
              - ReplicaSet
              - Pod
              - ComponentStatus
        resource.ignoreResourceUpdatesEnabled: "true"
        server.rbac.log.enforce.enable: "false"
        timeout.hard.reconciliation: 0s
        timeout.reconciliation: 180s
        url: https://argocd.home.lan
      params:
        create: true
        controller.server.side.diff.enabled: "true"
        controller.status.processors: "5"
        controller.operation.processors: "5"
        server.insecure: "true"
      rbac:
        policy.csv: |-
          p, role:org-admin, applications, *, */*, allow
          p, role:org-admin, clusters, *, */*, allow
          p, role:org-admin, respositories, *, */*, allow
          p, role:org-admin, logs, *, */*, allow
          p, role:org-admin, exec, *, */*, allow
          g, project_admin, role:org-admin
          p, backstage, applications, get, */*, allow
    server:
      url: https://argocd.home.lan
      resources:
        requests:
          cpu: 10m
          memory: 50Mi
        limits:
          cpu: 400m
          memory: 200Mi
      ingress:
        enabled: true
        ingressClassName: nginx
        hostname: argocd.home.lan
        tls: enabled
        annotations:
          cert-manager.io/cluster-issuer: vault-issuer
          cert-manager.io/common-name: argocd.home.lan
          cert-manager.io/revision-history-limit: "1"
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
    repoServer:
      resources:
        requests:
          cpu: 25m
          memory: 256Mi
        limits:
          cpu: 600m
          memory: 768Mi
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
    controller:
      resources:
        requests:
          cpu: 100m
          memory: 384Mi
        limits:
          cpu: 500m
          memory: 1024Mi
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
    dex:
      initImage:
        resources:
          requests: &dexResources
            cpu: 30m
            memory: 64Mi
          limits:
            cpu: 50m
            memory: 96Mi
      resources: *dexResources
      image:
        tag: latest-distroless
      volumeMounts:
        - mountPath: /etc/ssl/certs
          name: certs
          readOnly: true
      volumes:
        - hostPath:
            path: /etc/ssl/certs
          name: certs
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
      livenessProbe:
        enabled: true
      readinessProbe:
        enabled: true
    redis:
      resources:
        requests:
          cpu: 5m
          memory: 16Mi
        limits:
          cpu: 20m
          memory: 64Mi
      image:
        tag: 7.4.2-alpine
        imagePullPolicy: Always
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
      readinessProbe:
        enabled: true
      livenessProbe:
        enabled: true
    repositories:
      all:
        url: git@github.com:janikgar/home-k8s.git
        type: git
      semaphore:
        url: git@github.com:janikgar/semaphore-home-k8s.git
        type: git
    credentialTemplates:
      gitssh:
        url: git@github.com:janikgar/home-k8s.git
        sshPrivateKey: |
          REPLACE WITH APPROPRIATE KEY
      gitssh2:
        url: git@github.com:janikgar/semaphore-home-k8s.git
        sshPrivateKey: |
          REPLACE WITH APPROPRIATE KEY
    notifications:
      resources:
        requests:
          cpu: 15m
          memory: 48Mi
        limits:
          cpu: 25m
          memory: 128Mi
      notifiers:
        service.webhook.consul-app-version: |
          url: https://consul.home.lan/v1/kv/
        service.alertmanager: |
          targets:
            - alertmanager-operated.prometheus.svc.cluster.local:9093
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
      templates:
        template.alertmanager-notification: |
          message: "Application {{.app.metadata.name}} has update. Status: {{.app.status.sync.status}}, Health: {{.app.status.health.status}}"
          alertmanager:
            generatorURL: "https://argocd.home.lan/applications/argocd/{{.app.metadata.name}}"
            labels:
              origin: argocd
              app: "{{.app.metadata.name}}"
              namespace: argocd
              destNamespace: "{{.app.spec.destination.namespace}}"
              status: "{{.app.status.sync.status}}"
              health: "{{.app.status.health.status}}"
              revision: "{{.app.status.sync.revision}}"
        template.app-version-notification: |
          webhook:
            consul-app-version:
              method: PUT
              path: /argocd-versions/{{.app.metadata.name}}
              body: |
                {"deployed_version": "{{.app.status.sync.revision}}"}
      triggers:
        trigger.on-is-deployed: |
          - when: app.status.sync.status == 'Synced' and app.status.health.status == 'Healthy'
            send: [app-version-notification, alertmanager-notification]
---
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: argocd-application-controller
  namespace: argocd
spec:
  resourcePolicy:
    containerPolicies:
    - containerName: application-controller
  targetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: argocd-application-controller
  updatePolicy:
    updateMode: Auto
---
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: argocd-server
  namespace: argocd
spec:
  resourcePolicy:
    containerPolicies:
    - containerName: server
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: argocd-server
  updatePolicy:
    updateMode: Auto