---
- name: Check for Kube iptables
  ansible.builtin.shell: |
    set -o pipefail
    iptables -S | egrep 'KUBE|CILIUM' | wc -l
  args:
    executable: /bin/bash
  register: iptables_kube_chains
  changed_when: false

- name: Set fact for Kube iptables chains
  ansible.builtin.set_fact:
    safe_to_flush: "{{ iptables_kube_chains.stdout == 0 }}"

- name: Prepare iptables
  when: safe_to_flush
  block:
    - name: Flush tables
      ansible.builtin.command: iptables -F
      changed_when: true

    - name: Accept localhost
      ansible.builtin.iptables:
        chain: INPUT
        in_interface: lo
        jump: ACCEPT

    - name: Accept LAN TCP traffic on ports
      with_nested:
        - "{{ lan_ips }}"
        - "{{ security_groups }}"
      ansible.builtin.iptables:
        chain: INPUT
        source: "{{ item[0] }}"
        protocol: tcp
        destination_port: "{{ item[1].port }}"
        comment: "Allow LAN traffic to {{ item[1].comment }}"
        jump: ACCEPT
        wait: "10"

    - name: Accept LAN UDP traffic on ports
      with_nested:
        - "{{ lan_ips }}"
        - "{{ security_groups }}"
      ansible.builtin.iptables:
        chain: INPUT
        source: "{{ item[0] }}"
        protocol: udp
        destination_port: "{{ item[1].port }}"
        comment: "Allow LAN traffic to {{ item[1].comment }}"
        jump: ACCEPT
        wait: "10"

    - name: Accept all traffic on DNS, HTTP/S ports
      loop:
        - { port: "53", comment: "DNS" }
        - { port: "80", comment: "HTTP" }
        - { port: "443", comment: "HTTPS" }
      ansible.builtin.iptables:
        chain: INPUT
        protocol: tcp
        destination_port: "{{ item.port }}"
        comment: "Allow all traffic to {{ item.comment }}"
        jump: ACCEPT
        wait: "10"

    # - name: Reject other LAN traffic
    #   loop: "{{ lan_ips }}"
    #   ansible.builtin.iptables:
    #     chain: INPUT
    #     protocol: all
    #     source: "{{ item }}"
    #     comment: "Reject other LAN traffic"
    #     jump: REJECT
    #     wait: "10"

    # - name: Drop other external traffic
    #   ansible.builtin.iptables:
    #     chain: INPUT
    #     protocol: all
    #     comment: "Drop other traffic"
    #     jump: DROP
    - name: Save iptables
      ansible.builtin.command: iptables-save
      register: iptables_save
      changed_when: iptables_save.rc == 0

    - name: Restart
      ansible.builtin.reboot:
        reboot_timeout: 300
      when: iptables_reboot
